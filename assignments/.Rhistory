mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = "blue")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = "blue") +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy) +
geom_point(color = "blue")
# 3. We will use the built-in data set for this question.
# Whatâ€™s gone wrong with this code? Why are the points not blue?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
#### INITIALIZE ####
# 1. Set your working directory to be your homework repo, i.e. the dir that contains this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 2. Load tidyverse
library(tidyverse)
mpg
data <- mpg
mpg <- mpg
rm(data)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = cyl) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = trans,
size = cyl) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = manufacturer,
size = cyl) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = displ) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point()
?geom_point
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
stroke = drv) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = displ<5,
size = cyl,
shape = drv) +
geom_point()
# 6.
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point()
# 6.
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
# 6.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# 6.
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point() +
facet_wrap(trans ~ .)
# 6. Update the plot from number 5 to be faceted by `trans` and
# set the number of facet rows be 2
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point() +
facet_wrap(trans ~ .,
nrow = 2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
# 7. Update the following code to hide the figure legend
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = FALSE) +
theme(show.legend = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = FALSE) +
show.legend = FALSE
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point(show.legend = FALSE) +
geom_smooth(se = FALSE) +
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point(show.legend = FALSE) +
geom_smooth(se = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = FALSE) +
theme(legend.position="none")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = TRUE) +
theme(legend.position="none")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = TRUE, color = drv) +
theme(legend.position="none")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = TRUE) +
theme(legend.position="none")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy) +
geom_point(color = "blue")
# 5. Update the plot from number 4 to color the points by `year`,
# set the size by `cyl` and the shape by `drv`
# continue to use the unrolled code formatting I've emphasized in lecture
# see assignment_7_4.png to check your plot
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point()
# 6. Update the plot from number 5 to be faceted by `trans` and
# set the number of facet rows be 2
# continue to use the unrolled code formatting I've emphasized in lecture
# see assignment_7_5.png to check your plot
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point() +
facet_wrap(trans ~ .,
nrow = 2)
# 5. Update the plot from number 4 to color the points by `year`,
# set the size by `cyl` and the shape by `drv`
# continue to use the unrolled code formatting I've emphasized in lecture
# see assignment_7_4.png to check your plot
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point()
mpg %>%
ggplot() +
aes(x = displ,
y = hwy) +
geom_point(color = "blue")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = TRUE) +
theme(legend.position="none")
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv,
linetype = drv) +
geom_point() +
geom_smooth(se = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv,
linetype = drv) +
geom_point() +
geom_smooth(se = FALSE,
color = "blue")
diamonds <- diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop)), group=1)
# 9.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
# 9.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop)))
# 9.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 2))
# 9.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
# 9.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1000))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop)))
# 9.
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = clarity, y = stat(prop), group = 1))
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_errorbar(stat = median)
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_errorbar(stat = "median")
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_errorbar(stat = "summary_bin",
fun = median)
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_pointrange(stat = "summary",
fun = median)
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_pointrange(stat = "summary",
fun = median,
fun.min = min,
fun.max = max)
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_point(position = "jitter")
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_pointrange(stat = "summary",
fun = median,
fun.min = min,
fun.max = max)
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_point(position = "jitter")
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_count()
p
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_count(position = "jitter")
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_jitter()
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_count()
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_count(position = "jitter")
map_data("tx")
map_data("usa")
map_data("tx")
map_data("county", "texas")
geom_polygon(fill = "white",
color = "black") +
coord_quickmap()
# 11.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), make a map of Texas that shows the counties
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group) +
geom_polygon(fill = "white",
color = "black") +
coord_quickmap()
# 11.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), make a map of Texas that shows the counties
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat) +
geom_polygon(fill = "white",
color = "black") +
coord_quickmap()
# 11.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), make a map of Texas that shows the counties
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = group) +
geom_polygon(fill = "white",
color = "black") +
coord_quickmap()
map_data(map="county",
region="texas")
# 11.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), make a map of Texas that shows the counties
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(fill = "white",
color = "black") +
coord_quickmap()
# 11.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), make a map of Texas that shows the counties
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap()
# 11.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), make a map of Texas that shows the counties
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
theme(legend.position = "none") +
coord_quickmap()
# 8. Write the code to recreate the plot in `assignment_7_8.PNG`
# continue to use the unrolled code formatting I've emphasized in lecture
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv,
linetype = drv) +
geom_point() +
geom_smooth(se = FALSE,
color = "blue")
# 8. Write the code to recreate the plot in `assignment_7_8.PNG`
# this is a subset of Ex 3.6.6
# continue to use the unrolled code formatting I've emphasized in lecture
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv,
linetype = drv) +
geom_point() +
geom_smooth(se = FALSE,
color = "blue")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap() +
theme(legend.position = "none")
